data <- output.rds
data <- file.choose()
dta <- readRDS(data)
dta
library(treepplr)
library(ggplot2)
coinflips <- tibble(coinflips = sample(c(TRUE, FALSE), 20, replace = TRUE))
coinflips <- tibble(coinflips = sample(c(TRUE, FALSE), 20, replace = TRUE))
install.packages("tibble")
library(treepplr)
library(ggplot2)
coinflips <- tibble(coinflips = sample(c(TRUE, FALSE), 20, replace = TRUE))
library(tibble)
coinflips <- tibble(coinflips = sample(c(TRUE, FALSE), 20, replace = TRUE))
input <- treeppl_input(coinflips)
output <- treeppl_run(dir = system.file("extdata", package = "treepplr"),
source = "coin.tppl", data = input, samples = 100)
library(moments)
n <- 100
alpha <- 100
beta <- 1
g <- rgamma(n, shape = 100, rate = 1)
mean(g)
var(g)
kurtosis(g)
p <- rpois(n, g)
mean(p)
var(p)
kurtosis(p)
# if gamma shape (k) = 100, rate (theta) = 0.9
qgamma(0.025, shape = alpha+sum(p), rate = beta+n)
qgamma(0.975, shape = alpha+sum(p), rate = beta+n)
qgamma(0.05, shape = alpha+sum(p), rate = beta+n)
qgamma(0.95, shape = alpha+sum(p), rate = beta+n)
qgamma(0.1, shape = alpha+sum(p), rate = beta+n)
qgamma(0.9, shape = alpha+sum(p), rate = beta+n)
qgamma(0.2, shape = alpha+sum(p), rate = beta+n)
sep <- .sep()
sep <- .sep()
sep <- "/"
file_path <- "./test"
project_name <- "tree_inference"
model <- paste0(file_path, sep, project_name, ".tppl")
model
read_file(model)
read_file_raw(model)
install.packages("readr")
read_file_raw(model)
read_file(model)
library(readr)
read_file(model)
model <- paste0(file_path, sep, project_name, ".tppl")
model <- read_file(model)
modl
model
proj_path <- paste0(file_path, sep, project_name, ".tppl")
model <- read_file(paste0(proj_path, ".tppl"))
sep <- .sep()
proj_path <- paste0(file_path, sep, project_name)
model <- read_file(paste0(proj_path, ".tppl"))
tree <- read_file(paste0(proj_path, ".phyjson"))
tree <- read_file(paste0(proj_path, ".phyjson"))
tree <- read_file(paste0(proj_path, ".json"))
tree
model <- read_file(paste0(proj_path, ".tppl"))
tree <- fromJSON(paste0(proj_path, ".json"))
library(jsonlite)
tree <- jsonlite::fromJSON(paste0(proj_path, ".json"))
trees
tree
temp_dir <- .tp_tempdir()
.tp_tempdir <- function(temp_dir = NULL, sep = NULL, sub = NULL) {
if (is.null(sep)) {
sep <- .sep()
if (is.null(temp_dir))
temp_dir <- tempdir()
temp_dir <- normalizePath(temp_dir, sep)
if (substring(temp_dir, nchar(temp_dir)) != sep) {
temp_dir <- paste0(temp_dir, sep)
}
if (!is.null(sub))
temp_dir <- paste0(temp_dir, sub, sep)
if (!dir.exists(temp_dir))
dir.create(temp_dir)
temp_dir
}
}
#' Provide a separator character platform dependent
.sep <- function() {
if (.Platform$OS.type == "windows")
"\\"
else
"/"
}
#' Provide a enumeration for each model cover by the checker
.model_name <- function() {
list(
Basic = "basic",
Coin = "coin"
)
}
if (is.null(temp_dir)) {
temp_dir <- .tp_tempdir()
}
#' Write input for treeppl
.input <- function(model, data, temp_dir = NULL, project_name = NULL) {
if (is.null(temp_dir)) {
temp_dir <- .tp_tempdir()
}
if (is.null(project_name)) {
project_name <- "default"
}
temp_file <- paste0(temp_dir, sub, project_name)
write_file(model, paste0(temp_file, ".tppl"))
write_json(data, paste0(temp_file, ".json"))
}
.input(model, data)
#' Write input for treeppl
.input <- function(model, data, temp_dir = NULL, project_name = NULL) {
if (is.null(temp_dir)) {
temp_dir <- .tp_tempdir()
}
if (is.null(project_name)) {
project_name <- "default"
}
sep <- .sep()
temp_file <- paste0(temp_dir, sep, project_name)
write_file(model, paste0(temp_file, ".tppl"))
write_json(data, paste0(temp_file, ".json"))
}
.input(model, data)
#' Write input for treeppl
.input <- function(model, data, temp_dir = NULL, project_name = NULL) {
if (is.null(temp_dir)) {
temp_dir <- .tp_tempdir()
}
if (is.null(project_name)) {
project_name <- "default"
}
sep <- .sep()
temp_file <- paste0(temp_dir, sep, project_name)
readr::write_file(model, paste0(temp_file, ".tppl"))
write_json(data, paste0(temp_file, ".json"))
}
#' Write input for treeppl
.input <- function(model, data, temp_dir = NULL, project_name = NULL) {
if (is.null(temp_dir)) {
temp_dir <- .tp_tempdir()
}
if (is.null(project_name)) {
project_name <- "default"
}
sep <- .sep()
temp_file <- paste0(temp_dir, sep, project_name)
readr::write_file(model, paste0(temp_file, ".tppl"))
write_json(data, paste0(temp_file, ".json"))
}
.input(model, data)
temp_dir <- .tp_tempdir()
swd(temp_dir)
setwd(temp_dir)
data()
data
.input(model, tree)
trees
tree
.input(model, tree)
library(readr)
test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(test_coin_posterior)
plot(test_coin_posterior)
library(readr)
test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(test_coin_posterior)
plot(test_coin_posterior)
library(readr)
naiveMCMC-test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
library(readr)
naiveMCMC-test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
naiveMCMC_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
plot(naiveMCMC_test_coin_posterior)
library(readr)
importance_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/importance_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(importance_test_coin_posterior)
plot(importance_test_coin_posterior)
library(readr)
importance_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/importance_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(importance_test_coin_posterior)
plot(importance_test_coin_posterior)
plot(naiveMCMC_test_coin_posterior)
sum(naiveMCMC_test_coin_posterior.x2)
sum(naiveMCMC_test_coin_posterior[x2])
sum(naiveMCMC_test_coin_posterior[X2])
sum(naiveMCMC_test_coin_posterior[,X2])
sum(naiveMCMC_test_coin_posterior[,1])
sum(naiveMCMC_test_coin_posterior[,2])
sum(naiveMCMC_test_coin_posterior[1,1])
sum(naiveMCMC_test_coin_posterior[1,])
sum(naiveMCMC_test_coin_posterior[,1])
sum(naiveMCMC_test_coin_posterior[,1])
sum(naiveMCMC_test_coin_posterior[1,])
library(readr)
naiveMCMC_cor_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/naiveMCMC_cor_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(naiveMCMC_cor_test_coin_posterior)
plot(naiveMCMC_cor_test_coin_posterior)
plot(naiveMCMC_cor_test_coin_posterior)
sum(naiveMCMC_cor_test_coin_posterior[1,])
sum(naiveMCMC_cor_test_coin_posterior[,1])
sum(naiveMCMC_cor_test_coin_posterior[2,])
sum(naiveMCMC_cor_test_coin_posterior[,2])
sum(naiveMCMC_cor_test_coin_posterior[,3])
sum(naiveMCMC_cor_test_coin_posterior[,2])
sum(naiveMCMC_test_coin_posterior[,2])
library(readr)
lw_test_coin_posterior_cumul <- read_delim("~/Bureau/treeppl_driftkernel/lw_test_coin_posterior_cumul.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(lw_test_coin_posterior_cumul)
plot(lw_test_coin_posterior_cumul)
library(readr)
import_test_coin_posterior_cumul <- read_delim("~/Bureau/treeppl_driftkernel/import_test_coin_posterior_cumul.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(import_test_coin_posterior_cumul)
plot(import_test_coin_posterior_cumul)
library(readr)
lw_test_coin_posterior_cumul <- read_delim("~/Bureau/treeppl_driftkernel/lw_test_coin_posterior_cumul.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(lw_test_coin_posterior_cumul)
library(readr)
import_test_coin_posterior_cumul <- read_delim("~/Bureau/treeppl_driftkernel/import_test_coin_posterior_cumul.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(import_test_coin_posterior_cumul)
plot(lw_test_coin_posterior_cumul)
plot(import_test_coin_posterior_cumul)
library(readr)
lw_test_coin_posterior_cumul <- read_delim("~/Bureau/treeppl_driftkernel/lw_test_coin_posterior_cumul.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(lw_test_coin_posterior_cumul)
library(readr)
import_test_coin_posterior_cumul <- read_delim("~/Bureau/treeppl_driftkernel/import_test_coin_posterior_cumul.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(import_test_coin_posterior_cumul)
plot(lw_test_coin_posterior_cumul)
plot(import_test_coin_posterior_cumul)
library(readr)
naiveMCMC_1000_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/naiveMCMC_1000_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(naiveMCMC_1000_test_coin_posterior)
plot(naiveMCMC_1000_test_coin_posterior)
library(readr)
BPF_1000_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/BPF_1000_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(BPF_1000_test_coin_posterior)
plot(BPF_1000_test_coin_posterior)
sum(BPF_1000_test_coin_posterior[,2])
sum(naiveMCMC_1000_test_coin_posterior[,2])
library(readr)
naiveMCMC_1000_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/naiveMCMC_1000_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(naiveMCMC_1000_test_coin_posterior)
sum(naiveMCMC_1000_test_coin_posterior[,2])
plot(naiveMCMC_1000_test_coin_posterior)
plot(lw_test_coin_posterior_cumul)
plot(import_test_coin_posterior_cumul)
plot(lw_test_coin_posterior_cumul,range(0,1))
plot(lw_test_coin_posterior_cumul,xlim=c(0,1))
plot(naiveMCMC_1000_test_coin_posterior,xlim=c(0,1))
plot(lw_test_coin_posterior_cumul,xlim=c(0,1))
plot(import_test_coin_posterior_cumul,xlim=c(0,1))
library(readr)
lw_1000_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/lw_1000_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(lw_1000_test_coin_posterior)
plot(lw_1000_test_coin_posterior,xlim=c(0,1))
plot(naiveMCMC_1000_test_coin_posterior,xlim=c(0,1), ylim =c(0,0.0016))
plot(lw_1000_test_coin_posterior,xlim=c(0,1), ylim =c(0,0.0016))
library(readr)
lw_1000_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/lw_1000_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(lw_1000_test_coin_posterior)
library(readr)
lw_alter_1000_test_coin_posterior <- read_delim("~/Bureau/treeppl_driftkernel/lw_alter_1000_test_coin_posterior.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(lw_alter_1000_test_coin_posterior)
plot(lw_alter_1000_test_coin_posterior,xlim=c(0,1), ylim =c(0,0.0016))
plot(lw_1000_test_coin_posterior,xlim=c(0,1), ylim =c(0,0.0016))
plot(naiveMCMC_1000_test_coin_posterior,xlim=c(0,1), ylim =c(0,0.0016))
max(naiveMCMC_1000_test_coin_posterior[,2])
max(importance_test_coin_posterior[,2])
max(import_test_coin_posterior_cumul[,2])
max(lw_test_coin_posterior_cumul[,2])
plot(import_test_coin_posterior_cumul,xlim=c(0,1), ylim =c(0,0.0025))
plot(lw_test_coin_posterior_cumul,xlim=c(0,1), ylim =c(0,0.0025))
plot(lw_test_coin_posterior_cumul,xlim=c(0,1))
plot(lw_test_coin_posterior_cumul,xlim=c(0,1), ylim =c(0,0.00025))
plot(import_test_coin_posterior_cumul,xlim=c(0,1), ylim =c(0,0.00025))
plot(lw_test_coin_posterior_cumul, type="l", xlim=c(0,1), ylim =c(0,0.00025))
plot(importance_test_coin_posterior)
plot(lw_test_coin_posterior_cumul, col="red", xlim=c(0,1), ylim =c(0,0.00025))
lines(lambda, dgamma(lambda, alpha + sum(y), beta + n),
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00025))
lines(import_test_coin_posterior_cumul)
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00025))
lines(import_test_coin_posterior_cumul, type="d")
lines(import_test_coin_posterior_cumul, type="p")
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00025), label="coin model posterior")
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00025), title="coin model posterior")
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00025))
lines(import_test_coin_posterior_cumul, type="p")
title("coin model posterior")
lines(beta, type="l", col="green")
lines(beta(9,9), type="l", col="green")
plot(beta(9,9))
plot(nbeta(10000, 9,9))
plot(pbeta(10000, 9,9))
plot(dbeta(10000, 9,9))
plot(dbeta(9,9))
p = seq(0,!, length=10000)
p = seq(0,1, length=10000)
plot(dbeta(p, 9,9))
plot(p, dbeta(p, 9,9))
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00025))
lines(import_test_coin_posterior_cumul, type="p")
lines(dbeta(p, 9,9), type="l", col="green")
plot(p, dbeta(p, 9,9))
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00025))
plot(p, qbeta(p, 9,9))
plot(p, pbeta(p, 9,9))
plot(p, rbeta(p, 9,9))
plot(p, pbeta(p, 9,9))
plot(p, qbeta(p, 9,9))
plot(p, pbeta(p, 9,9))
plot(p, rbeta(p, 9,9))
plot(p, pbeta(p, 9,9))
plot(p, qbeta(p, 9,9))
qbeta(p, 9,9)
p
p1 <- p[1]
p1
p1 <- p[-1]
p1 <- p
p <- p[-1]
qbeta(p, 9,9) - qbeta(p1, 9,9)
qbeta(p, 9,9) - qbeta(p1, 9,9)
plot(p, qbeta(p, 9,9) - qbeta(p1, 9,9)
)
plot(p1, qbeta(p, 9,9) - qbeta(p1, 9,9)
)
plot(p1, qbeta(p, 9,9) - qbeta(p1, 9,9))
plot(p1, qbeta(p, 9,9) - qbeta(p1, 9,9), xlim=c(0,1), ylim =c(0,0.00025))
qbeta(p, 9,9)[1]
qbeta(p, 9,9)[2]
qbeta(p, 9,9)[3]
qbeta(p, 9,9)[3] - qbeta(p, 9,9)[2]
qbeta(p, 9,9)[4] - qbeta(p, 9,9)[3]
qbeta(p, 9,9)[10] - qbeta(p, 9,9)[9]
# alpha = 3, beta = 5, values = 10, succes = 6
qbeta(0.025, 9, 9)
qbeta(0.975, 9, 9)
qbeta(0.05, 9, 9)
qbeta(0.95, 9, 9)
qbeta(0.1, 9, 9)
qbeta(0.9, 9, 9)
qbeta(0.2, 9, 9)
qbeta(0.8, 9, 9)
pbeta(0.8, 9, 9)
plot(p, pbeta(p, 9,9))
plot(p1, pbeta(p, 9,9) - pbeta(p1, 9,9), xlim=c(0,1), ylim =c(0,0.00025))
plot(p1, pbeta(p, 9,9) - pbeta(p1, 9,9), xlim=c(0,1), ylim =c(0,0.00035))
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00025))
plot(lw_test_coin_posterior_cumul, col="red", xlab="Parameters", ylab="Probabilities", xlim=c(0,1), ylim =c(0,0.00033))
lines(import_test_coin_posterior_cumul, type="p", col="green")
lines(p1, pbeta(p, 9,9) - pbeta(p1, 9,9))
title("coin model posterior")
dir_path = NULL
project_name = NULL
src_name = NULL
method = "smc-bpf"
# if dir = NULL return temp_dir, if not return dir
temp_dir <- tp_tempdir(dir_path)
if(is.null(src_name)) src_name <- "out"
if(is.null(project_name)) project_name <- "input"
# if dir = NULL return temp_dir, if not return dir
temp_dir <- tp_tempdir(dir_path)
if(is.null(src_name)) src_name <- "out"
if(is.null(project_name)) project_name <- "input"
# Compile program
exec_wait(cmd = "tpplc", args = c(paste0(temp_dir, project_name, ".tppl"),
paste0("-m ", method),
paste0("--output ", temp_dir, src_name)))
library(sys)
# Compile program
exec_wait(cmd = "tpplc", args = c(paste0(temp_dir, project_name, ".tppl"),
paste0("-m ", method),
paste0("--output ", temp_dir, src_name)))
c(paste0(temp_dir, project_name, ".tppl"),
+                                       paste0("-m ", method),
+                                       paste0("--output ", temp_dir, src_name))
c(paste0(temp_dir, project_name, ".tppl"), paste0("-m ", method), paste0("--output ", temp_dir, src_name))
print(c(paste0(temp_dir, project_name, ".tppl"), paste0("-m ", method), paste0("--output ", temp_dir, src_name)))
# Compile program
exec_wait(cmd = "tpplc", args = c(paste0(temp_dir, project_name, ".tppl"))
)
setwd(temp_dir)
# if dir = NULL return temp_dir, if not return dir
temp_dir <- tp_tempdir(dir_path)
if(is.null(src_name)) src_name <- "out"
if(is.null(project_name)) project_name <- "input"
model_right <- "/*\n * File: coin.tppl\n * Description: Simplest meaningful probabilistic program. Evaluates how likely it is that a coin is fair, given data.\n * Compilation:\n *   tpplc models/lang/coin.tppl models/data/examples.mc out.mc && mi compile out.mc\n * Execution: ./out 100 1\n */\n\n/**\n * Conditions the likelihood of the computation \n *   on an observed datapoint to come from a particular Bernoulli experiment \n * Parameters:\n *   datapoint: Real\n *   probability: Real in (0, 1), the probability of True in the Bernoulli experiment\n * Returns: nothing\n * Side-effects: reweighs the computation\n */\nfunction flip(datapoint: Bool, probability: Real) {\n  observe datapoint ~ Bernoulli(probability);\n}\n\n/*\n * Model function\n * Data:\n *   coinflips: Bool[]\n * Prior: \n *   p ~ Beta(2, 2)\n * Posterior:\n *   p | coinflips\n */\nmodel function coinModel(coinflips: Bool[]) : Real  {\n  // Uncomment if you want to test the input\n  //printLn(\"Input:\");\n  //let coinStr = apply(bool2string, coinflips);\n  //printLn(join(coinStr));\n  assume p ~ Beta(2.0, 2.0); // prior\n  let n = length(coinflips);\n  for i in 1 to n {\n    flip(coinflips[i], p); // likelihood\n  }\n  return(p); // posterior\n}\n"
data_right <- list(coinflips=c(FALSE,TRUE,TRUE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE))
model_data_right <-list(model=model_right, data=data_right)
tp_write(model_data_right)
tp_compile()
# Compile program
exec_wait(cmd = "tpplc", args = c(paste0(temp_dir, project_name, ".tppl"))
)
setwd(temp_dir)
temp_dir
# Compile program
exec_wait(cmd = "tpplc", args = c(paste0(temp_dir, project_name, ".tppl"))
)
R_LIBS_USER
Sys.getenv("R_LIBS_USER")
.libPaths()
# Compile program
exec_wait(cmd = "tpplc", args = c(paste0(temp_dir, project_name, ".tppl"))
)
