[{"path":"http://treeppl.org/treepplr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 treepplr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://treeppl.org/treepplr/articles/coin-example.html","id":"load-model-and-data-files","dir":"Articles","previous_headings":"","what":"Load model and data files","title":"Coin flipping example","text":"Load coin model example data available within treepplr. data example sequence coin flip results. treeppl can read data JSON format, ’s example data format.","code":"model <- tp_model(\"coin\") data <- tp_data(\"coin\") str(data) #> List of 1 #>  $ coinflips: logi [1:20] FALSE TRUE TRUE TRUE FALSE TRUE ... #>  - attr(*, \"class\")= chr \"json\""},{"path":"http://treeppl.org/treepplr/articles/coin-example.html","id":"run-treeppl","dir":"Articles","previous_headings":"","what":"Run TreePPL","title":"Coin flipping example","text":"Now can compile run TreePPL program. function tp_treeppl() many optional arguments change inference method used. , use default settings pass model data.","code":"output_list <- tp_treeppl(model = model, data = data)"},{"path":"http://treeppl.org/treepplr/articles/coin-example.html","id":"plot-the-posterior-distribution","dir":"Articles","previous_headings":"","what":"Plot the posterior distribution","title":"Coin flipping example","text":"TreePPL outputs log weight sample, first need get normalized weights can plot posterior distribution produced.","code":"# turn list into a data frame where each row represents one sample  # and calculate normalized weights from log weights output <-  tp_parse(output_list) %>%    dplyr::mutate(weight = exp(log_weight - max(.$log_weight)))  ggplot2::ggplot(output) +   ggplot2::geom_histogram(aes(samples, y = after_stat(density), weight=weight), col = \"white\", fill = \"lightblue\") +   ggplot2::geom_density(aes(samples, weight=weight)) +   ggplot2::theme_bw()"},{"path":"http://treeppl.org/treepplr/articles/constant-rate-birth.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Constant rate birth (CRB) model","text":"use example (random) tree comes package.  need convert tree TreePPL readable format read CRB model.","code":"tree <- ape::read.tree(system.file(   \"extdata/crb_tree_15_tips.tre\", package = \"treepplr\")) ape::plot.phylo(tree, cex = 0.5) data <- tp_phylo_2_json(tree) model <- tp_model(system.file(\"extdata/crb.tppl\", package = \"treepplr\"))"},{"path":"http://treeppl.org/treepplr/articles/constant-rate-birth.html","id":"run-treeppl","dir":"Articles","previous_headings":"","what":"Run treeppl","title":"Constant rate birth (CRB) model","text":"Compile run TreePPL program standard inference settings.","code":"output_list <- tp_treeppl(model = model, data = data)"},{"path":"http://treeppl.org/treepplr/articles/constant-rate-birth.html","id":"plot-posterior","dir":"Articles","previous_headings":"","what":"Plot posterior","title":"Constant rate birth (CRB) model","text":"TreePPL outputs log weight sample, first need get normalized weights can plot posterior distribution produced.","code":"# turn list into a data frame where each row represents one sample  # and calculate normalized weights from log weights output <-  tp_parse(output_list) %>%    dplyr::mutate(weight = exp(log_weight - max(.$log_weight)))  ggplot2::ggplot(output) +   ggplot2::geom_histogram(aes(samples, y = after_stat(density), weight=weight),                            col = \"white\", fill = \"lightblue\") +   ggplot2::geom_density(aes(samples, weight=weight)) +   ggplot2::theme_bw()"},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"load-model-and-data-files","dir":"Articles","previous_headings":"","what":"Load model and data files","title":"Host repertoire model example","text":"Load 3-state host repertoire model example data available within treepplr.","code":"model <- tp_model(\"hostrep3states\") data <- tp_data(\"hostrep3states\")"},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"run-treeppl","dir":"Articles","previous_headings":"","what":"Run treeppl","title":"Host repertoire model example","text":"Now can compile run TreePPL program using default inference options. output tp_parse_host_rep() contains information outputted treeppl, need separate sampled character histories sampled parameter values.","code":"output_list <- tp_treeppl(model = model, model_file_name = \"hostrep\",                            data = data, data_file_name = \"hostrep\") output <- tp_parse_host_rep(output_list)"},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"parameter-estimates","dir":"Articles","previous_headings":"","what":"Parameter estimates","title":"Host repertoire model example","text":"","code":"logs <-  output[[1]] %>%    dplyr::select(iteration, log_weight, mu, beta) %>%    unique() %>%    dplyr::mutate(weight = exp(log_weight - max(.$log_weight)))  ggplot(logs) +   geom_histogram(aes(mu, y = after_stat(density), weight=weight), col = \"white\", fill = \"lightblue\") +   geom_density(aes(mu, weight=weight)) +   theme_bw() ggplot(logs) +   geom_histogram(aes(beta, y = after_stat(density), weight=weight), col = \"white\", fill = \"lightblue\") +   geom_density(aes(beta, weight=weight)) +   theme_bw()"},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"character-history","dir":"Articles","previous_headings":"","what":"Character history","title":"Host repertoire model example","text":"Extract table character history samples table can used evolnets plotting results, together phylogenetic trees known extant interactions.","code":"# post-treatment function get_history <- function(parsed_output){      table <- parsed_output[[1]] %>%      dplyr::select(-c(log_weight, mu, beta, lambda1, lambda2, lambda3, lambda4)) %>%     dplyr::mutate(transition_type = \"anagenetic\") %>%      dplyr::mutate(node_index = dplyr::case_when( # fix to mismatch and 0- to 1-base                                         node_index == 3 ~ 5,                                          node_index == 4 ~ 4,                                         TRUE ~ node_index + 1)) %>%      dplyr::filter(!is.na(log_norm_const))        return(table) }  tp_hist <- get_history(output) # get data from treepplr symbiont_tree <- evolnets::read_tree_from_revbayes(   system.file(\"extdata/hostrep3states_treeRev.tre\", package = \"treepplr\")) host_tree <- ape::read.tree(   system.file(\"extdata/hostrep3states_host_tree.tre\", package = \"treepplr\")) matrix <- read.csv(   system.file(\"extdata/hostrep3states_extant_interactions.csv\", package = \"treepplr\"),    row.names = 1) %>%    as.matrix()"},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"plot-data-and-inferred-ancestral-fundamental-host-repertoires","dir":"Articles","previous_headings":"Character history","what":"Plot data and inferred ancestral fundamental host repertoires","title":"Host repertoire model example","text":"","code":"# calculate posterior at nodes tp_at_nodes <- evolnets::posterior_at_nodes(tp_hist, symbiont_tree, host_tree, state = c(1,2))  #plot (tp_asr_fund <- evolnets::plot_matrix_phylo(matrix, tp_at_nodes, symbiont_tree,                                              host_tree, type = \"repertoires\",                                              repertoire = \"fundamental\"))"},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"plot-data-and-inferred-ancestral-realized-host-repertoires","dir":"Articles","previous_headings":"Character history","what":"Plot data and inferred ancestral realized host repertoires","title":"Host repertoire model example","text":"","code":"(tp_asr_real <- evolnets::plot_matrix_phylo(matrix, tp_at_nodes, symbiont_tree,                                              host_tree, type = \"repertoires\",                                              repertoire = \"realized\"))"},{"path":"http://treeppl.org/treepplr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mariana P Braga. Author, maintainer.","code":""},{"path":"http://treeppl.org/treepplr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"P Braga M (2025). treepplr: R Interface TreePPL. R package version 0.9.0, https://github.com/treeppl/treepplr.","code":"@Manual{,   title = {treepplr: R Interface to TreePPL},   author = {Mariana {P Braga}},   year = {2025},   note = {R package version 0.9.0},   url = {https://github.com/treeppl/treepplr}, }"},{"path":[]},{"path":"http://treeppl.org/treepplr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"R Interface to TreePPL","text":"treepplr R Interface TreePPL, probabilistic programming language phylogenetics. treepplr converts data format readable TreePPL, reads TreePPL output, connects downstream analyses model-specific packages, evolnets package host repertoire evolution model. See package’s documentation .","code":""},{"path":"http://treeppl.org/treepplr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface to TreePPL","text":"can install treepplr like :","code":"# install.packages(\"devtools\") # library(devtools)  devtools::install_github(\"treeppl/treepplr\")"},{"path":"http://treeppl.org/treepplr/reference/tp_check_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check input for inference with TreePPL — tp_check_input","title":"Check input for inference with TreePPL — tp_check_input","text":"function checks input tp_go().","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_check_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check input for inference with TreePPL — tp_check_input","text":"","code":"tp_check_input(model, data)"},{"path":"http://treeppl.org/treepplr/reference/tp_check_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check input for inference with TreePPL — tp_check_input","text":"model TreePPL model (S3) data json object (S3)","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_check_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check input for inference with TreePPL — tp_check_input","text":"...","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile the TreePPL program — tp_compile","title":"Compile the TreePPL program — tp_compile","text":"tp_compile compiles TreePPL model used tp_run.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile the TreePPL program — tp_compile","text":"","code":"tp_compile(   model_file_name = \"tmp_model_file\",   samples = 1000,   seed = NULL,   method = \"smc-bpf\",   align = FALSE,   cps = \"none\",   delay = NULL,   kernel = NULL,   mcmc_lw_gprob = NULL,   pmcmc_particles = NULL,   prune = FALSE,   subsample = NULL,   resample = NULL )"},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile the TreePPL program — tp_compile","text":"model_file_name string giving name temporary model file. samples base::integer giving number samples (MCMC) / particles (SMC). seed base::numeric use random seed. method string giving inference method name. align base::logical. Whether align model. cps string giving configuration CPS transformation. delay string giving configuration delayed sampling. kernel base::numeric value giving driftScale driftKernel MCMC. mcmc_lw_gprob base::numeric probability performing global MCMC step. pmcmc_particles base::integer number particles SMC proposal computation. prune base::logical. Whether prune model. subsample base::integer number draws subsample posterior distribution. resample string giving selected resample placement method.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile the TreePPL program — tp_compile","text":"directory wheŕe compiled file stored.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data for TreePPL program — tp_data","title":"Import data for TreePPL program — tp_data","text":"tp_data takes data prepares used tp_treeppl().","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data for TreePPL program — tp_data","text":"","code":"tp_data(data_input)"},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data for TreePPL program — tp_data","text":"data_input One tree options: full path JSON file contains data, string name model supported treepplr (see tp_model_names()), list (structured list) containing TreePPL data.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data for TreePPL program — tp_data","text":"json data (S3), see tp_json() details.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a json object — tp_json","title":"Create a json object — tp_json","text":"tp_json takes variable number arguments returns json object.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a json object — tp_json","text":"","code":"tp_json(...)"},{"path":"http://treeppl.org/treepplr/reference/tp_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a json object — tp_json","text":"... Variadic arguments (see details).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a json object — tp_json","text":"json object (S3).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a json object — tp_json","text":"function takes variable number arguments, users can pass arguments either independent lists, single structured list list (name_arg = value_arg).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_json_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a json object to json list — tp_json_list","title":"Convert a json object to json list — tp_json_list","text":"tp_json takes object class json returns json list ready exported JSON","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_json_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a json object to json list — tp_json_list","text":"","code":"tp_json_list(json)"},{"path":"http://treeppl.org/treepplr/reference/tp_json_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a json object to json list — tp_json_list","text":"json object class json.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_json_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a json object to json list — tp_json_list","text":"structured list","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a TreePPL model — tp_model","title":"Import a TreePPL model — tp_model","text":"tp_model takes TreePPL code prepares used tp_treeppl().","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a TreePPL model — tp_model","text":"","code":"tp_model(model_input)"},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a TreePPL model — tp_model","text":"model_input One tree options: full path model file contains TreePPL code, string name model supported treepplr (see tp_model_names()), string containing entire TreePPL code.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a TreePPL model — tp_model","text":"TreePPL model (S3). structured list string containing TreePPL model class (tp_model_names() \"custom\")","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Model names supported by treepplr — tp_model_names","title":"Model names supported by treepplr — tp_model_names","text":"Provides list model names supported treepplr. names can also used find data models (see tp_data).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model names supported by treepplr — tp_model_names","text":"","code":"tp_model_names()"},{"path":"http://treeppl.org/treepplr/reference/tp_model_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model names supported by treepplr — tp_model_names","text":"list model names.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse simple TreePPL json output — tp_parse","title":"Parse simple TreePPL json output — tp_parse","text":"tp_parse takes TreePPL json output returns data.frame","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse simple TreePPL json output — tp_parse","text":"","code":"tp_parse(treeppl_out, n_runs = 1)"},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse simple TreePPL json output — tp_parse","text":"treeppl_out character vector giving TreePPL json output produced tp_treeppl. n_runs base::integer giving number runs (MCMC) sweeps (SMC).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse simple TreePPL json output — tp_parse","text":"list (n = n_runs) data frames output inference TreePPL.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse_host_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse TreePPL json output for host repertoire model — tp_parse_host_rep","title":"Parse TreePPL json output for host repertoire model — tp_parse_host_rep","text":"tp_parse_host_rep takes TreePPL json output inference model host repertoire evolution returns data.frame","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse_host_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse TreePPL json output for host repertoire model — tp_parse_host_rep","text":"","code":"tp_parse_host_rep(treeppl_out, n_runs = 1)"},{"path":"http://treeppl.org/treepplr/reference/tp_parse_host_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse TreePPL json output for host repertoire model — tp_parse_host_rep","text":"treeppl_out character vector giving TreePPL json output produced tp_treeppl. n_runs base::integer giving number runs (MCMC) sweeps (SMC).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse_host_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse TreePPL json output for host repertoire model — tp_parse_host_rep","text":"list (n = n_runs) data frames output inference TreePPL host repertoire evolution model.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phylo_2_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert phylo to json — tp_phylo_2_json","title":"Convert phylo to json — tp_phylo_2_json","text":"tp_phylo_2_json takes object class phylo returns json object.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phylo_2_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert phylo to json — tp_phylo_2_json","text":"","code":"tp_phylo_2_json(phylo_tree)"},{"path":"http://treeppl.org/treepplr/reference/tp_phylo_2_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert phylo to json — tp_phylo_2_json","text":"phylo_tree object class ape::phylo.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phylo_2_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert phylo to json — tp_phylo_2_json","text":"json object (S3)","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a TreePPL program — tp_run","title":"Run a TreePPL program — tp_run","text":"tp_treeppl executes TreePPL returns inference output JSON format.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a TreePPL program — tp_run","text":"","code":"tp_run(   model_file_name = \"tmp_model_file\",   data_file_name = \"tmp_data_file\",   samples = 1000,   n_runs = \"1\" )"},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a TreePPL program — tp_run","text":"model_file_name string giving name temporary model file. data_file_name string giving name temporary data file. samples base::integer giving number samples (MCMC) / particles (SMC). n_runs base::integer giving number runs (MCMC) / sweeps (SMC).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a TreePPL program — tp_run","text":"TreePPL output JSON format.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_stored_compiled.html","id":null,"dir":"Reference","previous_headings":"","what":"List of compiled models in base::tempdir — tp_stored_compiled","title":"List of compiled models in base::tempdir — tp_stored_compiled","text":"Provides list compiled model file names currently stored base::tempdir.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_stored_compiled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of compiled models in base::tempdir — tp_stored_compiled","text":"","code":"tp_stored_compiled()"},{"path":"http://treeppl.org/treepplr/reference/tp_stored_compiled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of compiled models in base::tempdir — tp_stored_compiled","text":"list compiled model file names.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_stored_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data file names stored by user in base::tempdir using tp_write — tp_stored_data","title":"Data file names stored by user in base::tempdir using tp_write — tp_stored_data","text":"Provides list data file names currently stored base::tempdir. verify matching model file, see tp_stored_model.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_stored_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data file names stored by user in base::tempdir using tp_write — tp_stored_data","text":"","code":"tp_stored_data()"},{"path":"http://treeppl.org/treepplr/reference/tp_stored_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data file names stored by user in base::tempdir using tp_write — tp_stored_data","text":"list data file names.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_stored_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model file names stored by user in base::tempdir using tp_write — tp_stored_model","title":"Model file names stored by user in base::tempdir using tp_write — tp_stored_model","text":"Provides list model file names currently stored base::tempdir. verify matching data file, see tp_stored_data.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_stored_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model file names stored by user in base::tempdir using tp_write — tp_stored_model","text":"","code":"tp_stored_model()"},{"path":"http://treeppl.org/treepplr/reference/tp_stored_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model file names stored by user in base::tempdir using tp_write — tp_stored_model","text":"list model file names.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_tempdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporary directory for running treeppl — tp_tempdir","title":"Temporary directory for running treeppl — tp_tempdir","text":"tp_tempdir returns normalized path temporary directory executables can read write temporary files.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_tempdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporary directory for running treeppl — tp_tempdir","text":"","code":"tp_tempdir(temp_dir = NULL, sep = NULL, sub = NULL)"},{"path":"http://treeppl.org/treepplr/reference/tp_tempdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporary directory for running treeppl — tp_tempdir","text":"temp_dir NULL, path used; NULL, R's base::tempdir used. sep Better ignored; non-default values passed base::normalizePath. sub Extension defining sub-directory within directory defined base::tempdir.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_tempdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporary directory for running treeppl — tp_tempdir","text":"Normalized path system-dependent terminal separator.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile and run a TreePPL program — tp_treeppl","title":"Compile and run a TreePPL program — tp_treeppl","text":"tp_treeppl executes TreePPL returns inference output (string JSON format).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile and run a TreePPL program — tp_treeppl","text":"","code":"tp_treeppl(   model = NULL,   model_file_name = \"tmp_model_file\",   data = NULL,   data_file_name = \"tmp_data_file\",   compile_model = TRUE,   samples = 1000,   seed = NULL,   n_runs = 1,   method = \"smc-bpf\",   align = FALSE,   cps = \"none\",   delay = NULL,   kernel = NULL,   mcmc_lw_gprob = NULL,   pmcmc_particles = NULL,   prune = FALSE,   subsample = NULL,   resample = NULL )"},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile and run a TreePPL program — tp_treeppl","text":"model TreePPL model (S3). model_file_name string giving name temporary model file. data json object data needed inference (S3). data_file_name string giving name temporary data file. compile_model base::logical. Compile model? samples base::integer giving number samples (MCMC) / particles (SMC). seed base::numeric use random seed. n_runs base::integer giving number runs (MCMC) / sweeps (SMC). method string giving inference method name. align base::logical. Whether align model. cps string giving configuration CPS transformation. delay string giving configuration delayed sampling. kernel base::numeric value giving driftScale driftKernel MCMC. mcmc_lw_gprob base::numeric probability performing global MCMC step. pmcmc_particles base::integer number particles SMC proposal computation. prune base::logical. Whether prune model. subsample base::integer number draws subsample posterior distribution. resample string giving selected resample placement method.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile and run a TreePPL program — tp_treeppl","text":"TreePPL output JSON format.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compile and run a TreePPL program — tp_treeppl","text":"function takes TreePPL object (model) json object (data), compiles TreePPL model, runs data returns TreePPL output. TreePPL installed computer (see install manual). executable output files written R's base::tempdir. model : TreePPL model (S3), see tp_model details. Use 'NULL' previously provided model. Check already provided models tp_stored_model. model_file_name : string given tp_treeppl model name.  Use tp_stored_data name already written model tp_treeppl. data : json object (S3), see tp_json details. Use 'NULL' previously provided data. Check already provided data tp_stored_data. data_file_name : string given tp_treeppl data name. Use tp_stored_data name already written data tp_treeppl. compile_model : base::logical telling model needs compiled. Can used avoid compiling model R's base::tempdir. Check already compiled models tp_stored_compiled. samples : number samples (MCMC) / particles (SMC) inference. seed : random seed use. Using 'NULL' initializes randomly. n_runs : number runs (MCMC) / sweeps (SMC) used inference. method : Inference method used. supported methods : -lw, smc-bpf, smc-apf, mcmc-lightweight, mcmc-trace, mcmc-naive, pmcmc-pimh. following options applicable certain methods: align : Whether align model. cps : Configuration CPS transformation. supported options : none, partial, full. delay : model transformed efficient representation possible. supported options : static dynamic. Use 'NULL' ignore. kernel : value driftScale driftKernel MCMC. Use 'NULL' ignore. Use together method mcmc-lightweight\". Use 'NULL' ignore. mcmc_lw_gprob : probability performing global MH step (non-global means modify single sample previous trace). Use together method mcmc-lightweight\". Use 'NULL' ignore. pmcmc_particles : number particles SMC proposal computation. option used one following methods used: pmcmc-*. Use 'NULL' ignore. prune : model pruned possible. subsample : number draws subsample posterior distribution. Use together method smc-apf smc-bpf. Use 'NULL' ignore. resample: selected resample placement method. supported methods : likelihood (resample immediately likelihood updates), align (resample aligned likelihood updates, forces –align), manual (sample manually defined resampling locations). Use 'NULL' ignore.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare input for tp_compile — tp_write","title":"Prepare input for tp_compile — tp_write","text":"function takes TreePPL object (model) /json object (data) writes base::tempdir .tppl .json file, respectively.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare input for tp_compile — tp_write","text":"","code":"tp_write(   model = NULL,   model_file_name = \"tmp_model_file\",   data = NULL,   data_file_name = \"tmp_data_file\" )"},{"path":"http://treeppl.org/treepplr/reference/tp_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare input for tp_compile — tp_write","text":"model TreePPL model (S3). model_file_name string giving name temporary model file. data json object data needed inference (S3). data_file_name string giving name temporary data file.","code":""},{"path":"http://treeppl.org/treepplr/reference/treepplr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"treepplr: R Interface to TreePPL — treepplr-package","title":"treepplr: R Interface to TreePPL — treepplr-package","text":"package interface using TreePPL programs.","code":""},{"path":[]},{"path":"http://treeppl.org/treepplr/reference/treepplr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"treepplr: R Interface to TreePPL — treepplr-package","text":"Maintainer: Mariana P Braga mpiresbr@gmail.com (ORCID)","code":""}]
